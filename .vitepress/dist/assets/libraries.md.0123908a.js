import{_ as e,c as a,o as r,N as t}from"./chunks/framework.0799945b.js";const y=JSON.parse('{"title":"Libraries","description":"","frontmatter":{},"headers":[],"relativePath":"libraries.md"}'),o={name:"libraries.md"},i=t('<h1 id="libraries" tabindex="-1">Libraries <a class="header-anchor" href="#libraries" aria-label="Permalink to &quot;Libraries&quot;">​</a></h1><h3 id="package-json" tabindex="-1">Package.json <a class="header-anchor" href="#package-json" aria-label="Permalink to &quot;Package.json&quot;">​</a></h3><p>Your package.json is a magic file where you can add any and everything. It&#39;s very easy to abuse this so please follow these rules.</p><ol><li>Only add a package if you really need it.</li><li>Update them regularly. At least once per month.</li><li>Fixed versions. No ~ or ^ allowed.</li></ol><h3 id="wrapping" tabindex="-1">Wrapping <a class="header-anchor" href="#wrapping" aria-label="Permalink to &quot;Wrapping&quot;">​</a></h3><p>When using a library for components, validation, etc. It&#39;s always really smart to create a wrapper around it. This will:</p><ul><li>Help you control and clean up the API so that only the necessary options are exposed.</li><li>Give you the opportunity to cusomize them and add functionalty.</li><li>If you every decide to switch the library or are required to create your own custom implementation, you already have the API defined and every usage of that component doesn&#39;t have to change.</li></ul>',7),n=[i];function l(s,c,d,p,h,u){return r(),a("div",null,n)}const m=e(o,[["render",l]]);export{y as __pageData,m as default};
