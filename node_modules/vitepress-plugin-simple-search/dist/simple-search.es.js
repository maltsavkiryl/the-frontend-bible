import * as u from "fs-extra";
import g from "fs-extra";
import m from "glob";
import h from "gray-matter";
let e = {
  baseURL: "",
  regexForContentStripping: /[^a-zA-Z0-9._ ]+/g,
  preambleTransformer: void 0
};
function b(o) {
  return e = { ...e, ...o }, e && e.baseURL && e.baseURL.length >= 1 && e.baseURL.charAt(e.baseURL.length - 1) === "/" && (e.baseURL = e.baseURL.slice(0, e.baseURL.length - 1)), e.partialsToIgnore || (e.partialsToIgnore = []), e;
}
function p() {
  return e;
}
function S(o) {
  const n = p();
  return typeof n.regexForContentStripping > "u" ? o : o.replace(n.regexForContentStripping, "").toLowerCase();
}
async function v(o, n = void 0) {
  const a = m.sync(`${o}/**/*.md`.replace(/\\/gm, "/")), i = [], r = p();
  for (let t of a) {
    if (t.includes("node_modules") || r.partialsToIgnore && r.partialsToIgnore.length >= 1 && r.partialsToIgnore.findIndex((d) => t.includes(d)) !== -1)
      continue;
    const c = u.readFileSync(t).toString(), s = h(c);
    let l;
    typeof n < "u" ? l = n(s.data) : l = s.data, typeof l.title > "u" && console.warn(`${t} does not have a 'title' for building search index.`);
    const f = r.baseURL ? r.baseURL : "";
    i.push({
      title: l.title,
      content: S(s.content),
      link: t.replace(/.*docs/gm, f).replace(".md", "")
    });
  }
  return i;
}
function R(o) {
  const n = b(o);
  let a;
  const i = "virtual:simple-search", r = "\0" + i;
  return {
    name: "simple-search",
    enforce: "pre",
    configResolved(t) {
      a = t;
    },
    config: () => ({
      resolve: {
        alias: { "./VPNavBarSearch.vue": "vitepress-plugin-simple-search/Search.vue" }
      }
    }),
    resolveId(t) {
      if (t === i)
        return r;
    },
    async load(t) {
      if (t === r) {
        const c = n.docsPath ? n.docsPath : a.root;
        if (!g.existsSync(c))
          throw console.warn(`File Pathway: ${c} does not exist. Search could not be built.`), console.warn("Try 'process.cwd() + your folder'"), new Error("Docs pathway could not be found.");
        const s = await v(a.root, o.preambleTransformer);
        return `const regexForContentStripping = ${n.regexForContentStripping};
const data =` + JSON.stringify(s) + `;
export default { data, regexForContentStripping };`;
      }
    }
  };
}
export {
  R as SimpleSearch
};
